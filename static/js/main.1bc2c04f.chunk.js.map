{"version":3,"sources":["Firebase.js","Header.js","SearchResults.js","AddSchool.js","Favourite.js","Favourites.js","Footer.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","Header","setRedirect","setState","redirect","renderRedirect","state","to","favouriteLength","database","ref","on","data","favouriteSchool","favouritesObject","val","Favourites","newFavouriteArray","favourite","push","favouritesLength","length","this","props","schoolHandler","radiusHandler","handleCityInput","handleCountryInput","submitHandler","action","onSubmit","className","onChange","type","placeholder","id","required","htmlFor","name","value","onClick","activeClassName","exact","Component","SearchResults","removeSchool","schoolRef","child","remove","Swal","fire","title","text","icon","confirmButtonText","handleAddFav","address","dbFavouritesRef","schoolName","schoolAddress","schoolNotes","savedSchool","sectionRef","React","createRef","current","scrollIntoView","userCityInput","userCountryInput","schoolResults","map","schoolObj","location","formattedAddress","join","schoolsAdded","newSchoolObj","AddSchool","addSchool","e","preventDefault","schoolFormattedAddress","street","city","province","postalCode","country","dbRef","userNewSchool","schoolType","schoolNote","console","log","updateAddress","event","property","target","checked","Favourite","handleAddNotes","schoolId","update","school","favourites","userFavourite","favouritesArray","notes","require","Fragment","Footer","href","App","getData","axios","method","responseType","url","params","client_id","client_secret","near","cityInput","countryInput","categoryId","schoolTypeId","radius","v","then","res","filteredArray","response","venues","filter","object","includes","categories","isActive","catch","err","newSchoolObject","NewSchools","newSchoolArray","userSchoolType","filteredNewSchoolArray","addedSchoolCity","toLowerCase","addedSchoolCountry","newSchool","handleSubmit","handleSchoolType","handleRadius","path","render","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1bc2c04f.chunk.js","sourcesContent":["\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCx_22IVNfxHM8TyjNoRqbqbf30j2flMgU\",\r\n    authDomain: \"collegenavigator-40c76.firebaseapp.com\",\r\n    projectId: \"collegenavigator-40c76\",\r\n    storageBucket: \"collegenavigator-40c76.appspot.com\",\r\n    messagingSenderId: \"497329332909\",\r\n    appId: \"1:497329332909:web:c15591a2de202a9fe99c24\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import { Component } from 'react';\r\nimport { NavLink, Redirect } from 'react-router-dom';\r\nimport firebase from './Firebase'\r\n\r\n\r\n\r\nclass Header extends Component{\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state={\r\n            favouriteLength:[],\r\n            redirect: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const dbRef = firebase.database().ref();\r\n\r\n        dbRef.on('value', (data) => {\r\n            const firebaseDataObj = data.val();\r\n            const favouritesObject = firebaseDataObj.Favourites;\r\n            let newFavouriteArray = [];\r\n            let favouriteSchool;\r\n\r\n            for (let favourite in favouritesObject) {\r\n                favouriteSchool = favouritesObject[favourite];\r\n                newFavouriteArray.push(favouriteSchool);\r\n            }\r\n\r\n            this.setState({\r\n                favouritesLength: newFavouriteArray.length - 1\r\n            })\r\n        })\r\n    }\r\n\r\n    setRedirect = () => {\r\n        this.setState({\r\n            redirect:true\r\n        })\r\n    }\r\n\r\n    renderRedirect = () => {\r\n        if(this.state.redirect) {\r\n            this.setState({\r\n                redirect:false\r\n            })\r\n            return <Redirect to='project6CollegeNavigator' />\r\n        }\r\n    }\r\n\r\n    render() {    \r\n    const { schoolHandler, radiusHandler, handleCityInput, handleCountryInput, submitHandler } = this.props;\r\n        return (\r\n            <header>\r\n                <h1>College Navigator</h1>\r\n                <form action='submit' onSubmit={submitHandler}>\r\n                    <div className=\"wrapper\">\r\n\r\n                    \r\n                    <div className=\"cityInputs\">\r\n                    <input onChange={handleCityInput} type=\"text\" placeholder='City' id='citySearch' required/>\r\n                    <label className='srOnly' htmlFor=\"citySearch\">Please enter a city to search</label>\r\n\r\n                    <input onChange={handleCountryInput} type=\"text\" placeholder='Province/State OR Country' id='countrySearch' required/>\r\n                    <label className=\"srOnly\" htmlFor=\"countrySearch\">Please enter the country the city is in</label>\r\n                    </div>\r\n                    \r\n                    <div className=\"radiusInputs\">\r\n                        <legend>Search Radius</legend>\r\n                        <div>\r\n                            <input onChange={radiusHandler} type=\"radio\" id='shortRadius' name='radius' value='5000' required/>\r\n                            <label htmlFor=\"shortRadius\">5KM</label>\r\n                            <input onChange={radiusHandler} type=\"radio\" id='mediumRadius' name='radius' value='10000' />\r\n                            <label htmlFor=\"mediumRadius\">10KM</label>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <input onChange={radiusHandler} type=\"radio\" id='longRadius' name='radius' value='25000' />\r\n                            <label htmlFor=\"longRadius\">25KM</label>\r\n                            <input onChange={radiusHandler} type=\"radio\" id='xlongRadius' name='radius' value='50000' />\r\n                            <label htmlFor=\"xlongRadius\">50KM</label>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"schoolTypeInputs\">\r\n                        <legend>School Type</legend>\r\n                        <input onChange={schoolHandler} type=\"radio\" id='university' name='schoolType' value='4bf58dd8d48988d1ae941735' required/>\r\n                        <label htmlFor=\"university\">University</label>\r\n                        <input onChange={schoolHandler} type=\"radio\" id='college' name='schoolType' value='4bf58dd8d48988d1a2941735' />\r\n                        <label htmlFor=\"college\">College</label>\r\n                        <div>\r\n                            <input onChange={schoolHandler} type=\"radio\" id='tradeSchool' name='schoolType' value='4bf58dd8d48988d1ad941735' />\r\n                            <label htmlFor=\"tradeSchool\">Trade School</label>\r\n                        </div>\r\n                    </div>\r\n                    {this.renderRedirect()}\r\n                    <button onClick={this.setRedirect}>Find Schools!</button>\r\n                    </div>\r\n                </form>\r\n                <nav>\r\n                    <ul>\r\n                        <li>\r\n                            <NavLink activeClassName=\"active\" exact to=\"/\">Home</NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink activeClassName=\"active\" to=\"/favourites\">Favourite Schools ({this.state.favouritesLength})</NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink activeClassName=\"active\" to=\"/addSchool\">Add School</NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component, Fragment } from 'react';\r\nimport firebase from './Firebase.js';\r\nimport Swal from 'sweetalert2'\r\n\r\n\r\n\r\nclass SearchResults extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            savedSchool: {\r\n                schoolName: '',\r\n                schoolAddress: [],\r\n            }\r\n        }\r\n\r\n        this.sectionRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.sectionRef.current.scrollIntoView();\r\n    }\r\n    \r\n    \r\n    \r\n\r\n\r\n    removeSchool = (schoolRef) => {\r\n        const dbFavouritesRef = firebase.database().ref('NewSchools');\r\n        dbFavouritesRef.child(schoolRef).remove();\r\n        Swal.fire({\r\n            title: \"Institution Removed\",\r\n            text: \"thank you\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Ok\",\r\n        })\r\n    }\r\n\r\n\r\n    handleAddFav = (name, address) => {\r\n\r\n        const dbFavouritesRef = firebase.database().ref('Favourites')\r\n        const favouriteSchool = {\r\n            schoolName: name,\r\n            schoolAddress: [...address],\r\n            schoolNotes: ''\r\n        }\r\n        dbFavouritesRef.push(favouriteSchool);\r\n\r\n        Swal.fire({\r\n            title: \"Institution Added\",\r\n            text: \"thank you\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Ok\",\r\n        })\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <Fragment>\r\n                <div className=\"combinedSchools\">\r\n                <div className=\"searchedSchools\">\r\n                <h2 ref={this.sectionRef}>Search results: <span>{this.props.userCityInput}, {this.props.userCountryInput}</span></h2>\r\n                {\r\n                this.props.schoolResults.map((schoolObj) => {\r\n                    return(\r\n                    <div className=\"schoolResults\">\r\n                        <details key={schoolObj.id}>\r\n                            <summary>{schoolObj.name}</summary>\r\n                                <p>{schoolObj.location.formattedAddress.join(', ')}</p>\r\n                        </details>\r\n                        <button \r\n                        onClick={ () => {this.handleAddFav(schoolObj.name, schoolObj.location.formattedAddress)} }\r\n                        >Add to favourites\r\n                        </button>\r\n                    </div>\r\n                    )\r\n                })\r\n                }\r\n                </div>\r\n                <div className=\"addedSchool\">\r\n                <h2>User's Added Institutions</h2>\r\n                {\r\n                this.props.schoolsAdded.map((newSchoolObj) => {\r\n                    return(\r\n                    <div className=\"schoolResults\">\r\n                        <details key={newSchoolObj.id}>\r\n                            <summary>{newSchoolObj.schoolName}</summary>\r\n                                <p>{newSchoolObj.schoolAddress.join(', ')}</p>\r\n                        </details>\r\n                        <div className='buttonFlex'>\r\n                            <button \r\n                            onClick={ () => {this.handleAddFav(newSchoolObj.schoolName, newSchoolObj.schoolAddress)} }\r\n                            >Add to favourites\r\n                            </button>\r\n                            <button \r\n                            onClick={ () => {this.removeSchool(newSchoolObj.id)} }\r\n                            >Remove School\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    )\r\n                })\r\n                }\r\n                </div>\r\n                </div>\r\n            </Fragment>\r\n            \r\n        \r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchResults;","import { Component, Fragment } from 'react';\r\nimport firebase from './Firebase.js';\r\nimport Swal from 'sweetalert2'\r\n\r\nclass AddSchool extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n                schoolName:'',\r\n                schoolType: '',\r\n                schoolNote: '',\r\n                schoolAddress: {\r\n                    street: '',\r\n                    city: '',\r\n                    province: '',\r\n                    postalCode: '',\r\n                    country: ''\r\n                }\r\n        };\r\n        \r\n        // this.submitNewSchool = this.submitNewSchool.bind(this);\r\n\r\n    }\r\n\r\n    addSchool = (e) => {\r\n        e.preventDefault();\r\n        \r\n        \r\n        let schoolFormattedAddress = [this.state.schoolAddress.street, \r\n            this.state.schoolAddress.city + \" \" + this.state.schoolAddress.province + \" \" + this.state.schoolAddress.postalCode,\r\n            this.state.schoolAddress.country ];\r\n        // console.log(schoolFormattedAddress, 'for');\r\n        \r\n        //make a referance to the database\r\n        const dbRef = firebase.database().ref('NewSchools')\r\n        const userNewSchool = {\r\n            schoolName:this.state.schoolName,\r\n            schoolType:this.state.schoolType,\r\n            schoolAddress: schoolFormattedAddress,\r\n            schoolNote: this.state.schoolNote\r\n        };\r\n        console.log(userNewSchool, 'newschool');\r\n\r\n\r\n        dbRef.push(userNewSchool);\r\n        \r\n        // create a notification for add push\r\n        Swal.fire({\r\n            title: \"New institution added\",\r\n            text: \"Thank You\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Ok\",\r\n            })\r\n\r\n        // clear form\r\n        this.setState({\r\n            schoolName: '',\r\n            schoolNote: '',\r\n            schoolType: '',\r\n            schoolAddress: {\r\n                street: '',\r\n                city: '',\r\n                province: '',\r\n                postalCode: '',\r\n                country: ''\r\n            }\r\n        })\r\n    }\r\n\r\n    updateAddress = (event, property) =>{\r\n        let schoolAddress = {...this.state.schoolAddress};\r\n        schoolAddress[property] = event.target.value;\r\n        this.setState({schoolAddress});\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Fragment>\r\n                <div className=\"addSchoolForm\">\r\n                <form >\r\n                    <label htmlFor=\"newSchoolName\">School Name</label>\r\n                        <input type=\"text\" id=\"newSchoolName\"\r\n                        value={this.state.schoolName}\r\n                        onChange={(event) => this.setState({schoolName: event.target.value})}/><br/>\r\n                    <div className=\"schoolTypeInputs\">\r\n                    <legend>School Type</legend>\r\n                        <input type=\"radio\" id='university' name='schoolType' \r\n                        value='University' required \r\n                        checked={this.state.schoolType === \"University\"}\r\n                        onChange={(event) => this.setState({ schoolType: event.target.value })}/>\r\n                    <label htmlFor=\"university\">University</label>\r\n                        <input type=\"radio\" id='college' name='schoolType'\r\n                        value='Community College' \r\n                        checked={this.state.schoolType === \"Community College\"}\r\n                        onChange={(event) => this.setState({ schoolType: event.target.value })}/>\r\n                    <label htmlFor=\"college\">College</label>\r\n                        <input type=\"radio\" id='tradeSchool' name='schoolType' \r\n                        value='Trade School'\r\n                        checked={this.state.schoolType === \"Trade School\"}\r\n                        onChange={(event) => this.setState({ schoolType: event.target.value })}/>\r\n                    <label htmlFor=\"tradeSchool\">Trade School</label><br/>\r\n                    </div>\r\n                    <div className=\"addressInputs\">\r\n                        <div className=\"addressInput\">\r\n                    <label htmlFor=\"newSchoolAddress\">Address</label>\r\n                        <input type=\"text\" id=\"newSchoolAddress\"\r\n                        value={this.state.schoolAddress.street}\r\n                        onChange={(event) => this.updateAddress(event, 'street')}/>\r\n                        </div>\r\n                        <div className=\"addressInput\">\r\n                    <label htmlFor=\"newSchoolCity\">City</label>\r\n                        <input type=\"text\" id=\"newSchoolCity\" \r\n                        value={this.state.schoolAddress.city}\r\n                        onChange={(event) => this.updateAddress(event, 'city')} />\r\n                        </div>\r\n                        <div className=\"addressInput\">\r\n                    <label htmlFor=\"newSchoolProvince\">Province</label>\r\n                    <input type=\"text\" id=\"newSchoolProvince\"\r\n                        value={this.state.schoolAddress.province}\r\n                        onChange={(event) => this.updateAddress(event, 'province')} />\r\n                        </div>\r\n                        <div className=\"addressInput\">\r\n                    <label htmlFor=\"newSchoolPostal\">Postal Code</label>\r\n                        <input type=\"text\" id=\"newSchoolPostal\" \r\n                        value={this.state.schoolAddress.postalCode}\r\n                        onChange={(event) => this.updateAddress(event, 'postalCode')} />\r\n                        </div>\r\n                        <div className=\"addressInput\">\r\n                    <label htmlFor=\"newSchoolCountry\">Country</label>\r\n                        <input type=\"text\" id=\"newSchoolCountry\"\r\n                        value={this.state.schoolAddress.country}\r\n                        onChange={(event) => this.updateAddress(event, 'country')} />\r\n                        </div>\r\n                        </div>\r\n                    <label htmlFor=\"addNote\">Note</label>\r\n                        <textarea\r\n                        value={this.state.schoolNote}\r\n                        onChange={(event) => this.setState({ schoolNote: event.target.value })}></textarea>\r\n                    <button className=\"addSchoolButton\" onClick={this.addSchool}>Add new school</button>\r\n                </form>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddSchool;","import { Component } from 'react';\r\nimport firebase from './Firebase.js';\r\nimport Swal from 'sweetalert2'\r\n\r\nclass Favourite extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            schoolNotes: '',\r\n            schoolId: ''\r\n        }\r\n    }\r\n\r\n    removeSchool = (schoolRef) => {\r\n        const dbFavouritesRef = firebase.database().ref('Favourites');\r\n        dbFavouritesRef.child(schoolRef).remove();\r\n        Swal.fire({\r\n            title: \"Institution Removed\",\r\n            text: \"Your favourite list has been updated\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Ok\",\r\n        })\r\n    }\r\n\r\n    handleAddNotes = (schoolId) => {\r\n        const dbFavouritesRef = firebase.database().ref('Favourites')\r\n        dbFavouritesRef.child(schoolId).update({ schoolNotes: this.state.schoolNotes });\r\n       this.setState({\r\n           schoolNotes: ''\r\n       })\r\n        Swal.fire({\r\n            title: \"Note Added\",\r\n            text: \"Added\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Ok\",\r\n        })\r\n    }\r\n\r\n   render() { \r\n       const {id, schoolName, schoolAddress, schoolNotes} = this.props.school;\r\n       return (\r\n           \r\n           <li key={id} className=\"favoritesFlex\">\r\n                   <h3>{schoolName}</h3>\r\n                   <p>{schoolAddress}</p>\r\n                   <p><span>Notes: </span>{schoolNotes}</p>\r\n                   <label htmlFor=\"notes\" className=\"srOnly\">Notes: type below to add</label>\r\n                   <textarea placeholder=\"Type here to add notes\" value={this.state.schoolNotes} name=\"notes\" id=\"notes\" onChange={(event) => this.setState({schoolNotes: event.target.value, schoolId: id })}></textarea>\r\n                   <div className=\"buttonFlex\">\r\n                   <button onClick={() => { this.handleAddNotes(id) }}>Add Notes</button>\r\n                   <button onClick={() => { this.removeSchool(id) }}>Remove School</button>\r\n                   </div>\r\n               </li>\r\n           \r\n           )\r\n   }\r\n}\r\nexport default Favourite;","import { Component, Fragment } from 'react';\r\nimport firebase from './Firebase.js';\r\nimport Favourite from './Favourite.js';\r\n\r\nclass Favourites extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state ={\r\n            favourites: [],\r\n            schoolNotes: '',\r\n            schoolId: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const dbRef = firebase.database().ref();\r\n\r\n        dbRef.on('value', (data) => {\r\n            const firebaseDataObj = data.val();\r\n            const favouritesObject = firebaseDataObj.Favourites;\r\n\r\n            let favouritesArray = [];\r\n            let userFavourite;\r\n\r\n            for (let schoolId in favouritesObject) {\r\n                userFavourite = favouritesObject[schoolId];\r\n                userFavourite.id = schoolId; \r\n                userFavourite.notes = this.state.schoolNotes\r\n                favouritesArray.push(userFavourite);\r\n            }\r\n\r\n            this.setState({\r\n                favourites: favouritesArray\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n   render() { \r\n       return (\r\n           <Fragment>\r\n               <div className=\"favorites\">\r\n               <h2>Favourites</h2>\r\n               <ul>\r\n               {\r\n                   this.state.favourites.map((school) => {\r\n                       return(\r\n                        <Fragment>\r\n                            <Favourite \r\n                            school={school}\r\n                            />\r\n                        </Fragment>\r\n                       )\r\n                   })\r\n               }\r\n               </ul>\r\n               </div>\r\n           </Fragment>\r\n       )\r\n   }\r\n}\r\nexport default Favourites;","const { Fragment } = require(\"react\");\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer>\r\n        <p>Juno College 2020 Created by <span>Clarke, Erzhena, Harry and Kyle &#169;</span></p>\r\n\r\n        <p><span>Photo by <a href=\"https://unsplash.com/@iemyoung?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Emily Karakis</a> on <a href=\"https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Swal from 'sweetalert2';\r\nimport axios from 'axios';\r\nimport firebase from './Firebase.js';\r\nimport Header from './Header.js';\r\nimport SearchResults from './SearchResults.js';\r\nimport './App.css';\r\nimport AddSchool from './AddSchool';\r\nimport Favourites from './Favourites.js';\r\nimport Footer from './Footer.js';\r\n\r\n\r\nlet city = \"\";\r\nlet country = \"\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      schoolResults: [],\r\n      favourites: [],\r\n      radius: '',\r\n      schoolTypeId: '',\r\n      cityInput: '',\r\n      countryInput: '',\r\n      formattedAddress: [],\r\n      newSchool: [],\r\n      favouriteLength: '',\r\n      isActive: false,\r\n    }\r\n  }\r\n\r\n\r\n getData = () => {\r\n   axios({\r\n    method: 'GET',\r\n    responseType: 'json',\r\n    url: 'https://api.foursquare.com/v2/venues/search',\r\n    params: {\r\n      client_id:'SMUUEFGVRENHIW3EQX5ICCFCTNQPPIWVXP21E2BQVRH421OF',\r\n      client_secret:'EVNPHQ3EYKNQKZMOAKRVUTT0KDHXXGNUWUCY0LFZTVRE2BAF',\r\n      near: this.state.cityInput + \" \" + this.state.countryInput,\r\n      categoryId:this.state.schoolTypeId,\r\n      radius:this.state.radius, //its in metres\r\n      v: 20201205\r\n            }\r\n  }).then((res) => {\r\n    const dataArray = res.data.response.venues;\r\n\r\n\r\n    const filteredArray = dataArray.filter((object => {\r\n      return object.name.includes(\"University\") || object.categories[0].name === \"Community College\" || object.categories[0].name === \"Trade School\" && object.location.formattedAddress.length > 2})\r\n    );\r\n\r\n   \r\n    // this.props.schoolResults[0].location.formattedAddress\r\n    \r\n\r\n    this.setState({\r\n      schoolResults: filteredArray,\r\n      isActive:true\r\n    })\r\n\r\n  }).catch ((err) => {\r\n    this.setState({\r\n      isActive:false\r\n    })\r\n    Swal.fire({\r\n      title: \"No schools found\",\r\n      text: \"Please Try Another City and Province/Country\",\r\n      icon: \"error\",\r\n      confirmButtonText: \"Ok\",\r\n    })\r\n  })\r\n\r\n   const dbRef = firebase.database().ref();\r\n   dbRef.on('value', (data) => {\r\n     const firebaseDataObj = data.val();\r\n     const newSchoolObject = firebaseDataObj.NewSchools;\r\n\r\n     let newSchoolArray = [];\r\n     let userNewSchool;\r\n\r\n     for (let schoolId in newSchoolObject) {\r\n       userNewSchool = newSchoolObject [schoolId];\r\n       userNewSchool.id = schoolId;\r\n\r\n       newSchoolArray.push(userNewSchool);\r\n     }\r\n\r\n     let userSchoolType= '';\r\n     if (this.state.schoolTypeId === '4bf58dd8d48988d1ae941735'){\r\n       userSchoolType = 'University'\r\n     } else if (this.state.schoolTypeId === '4bf58dd8d48988d1a2941735'){\r\n       userSchoolType = 'Community College'\r\n     } else if (this.state.schoolTypeId === '4bf58dd8d48988d1ad941735'){\r\n        userSchoolType = 'Trade School'\r\n     }\r\n\r\n     \r\n     const filteredNewSchoolArray = newSchoolArray.filter((object => {\r\n      //  making inputs and comparison case sensitive\r\n       const addedSchoolCity = object.schoolAddress[1].toLowerCase();\r\n       const addedSchoolCountry = object.schoolAddress[2].toLowerCase();\r\n\r\n       return (object.schoolType === userSchoolType && addedSchoolCity.includes(this.state.cityInput.toLowerCase()) && addedSchoolCountry.includes(this.state.countryInput.toLowerCase()))\r\n     })\r\n     );\r\n\r\n\r\n     this.setState({\r\n       newSchool: filteredNewSchoolArray\r\n     })\r\n   })\r\n   city = this.state.cityInput;\r\n   country = this.state.countryInput;\r\n }\r\n\r\n\r\n handleSubmit = (e) => {\r\n   e.preventDefault();\r\n   this.getData();\r\n }\r\n\r\n handleSchoolType = (e) => {\r\n   this.setState({\r\n     schoolTypeId: e.target.value\r\n   })\r\n }\r\n\r\n handleRadius = (e) => {\r\n   this.setState({\r\n     radius: e.target.value\r\n   })\r\n }\r\n\r\n handleCityInput = (e) => {\r\n  this.setState({\r\n    cityInput: e.target.value\r\n  })\r\n }\r\n\r\n handleCountryInput = (e) => {\r\n   this.setState({\r\n     countryInput: e.target.value\r\n   })\r\n }\r\n\r\n\r\n\r\n  render() {\r\n    return(\r\n      <Router>\r\n        \r\n        <Header\r\n        schoolHandler={this.handleSchoolType}\r\n        radiusHandler={this.handleRadius}\r\n        handleCityInput={this.handleCityInput}\r\n        handleCountryInput={this.handleCountryInput}\r\n        submitHandler={this.handleSubmit}\r\n        />\r\n        <div className=\"wrapper\">\r\n        {this.state.isActive \r\n            ? <Route exact path=\"/\" render={() => {\r\n          return (\r\n            <>\r\n            <SearchResults \r\n              schoolResults = {this.state.schoolResults}\r\n              schoolsAdded = {this.state.newSchool}\r\n              userCityInput = {city}\r\n              userCountryInput = {country}\r\n              />\r\n            </>\r\n          )\r\n        }\r\n        }/> \r\n        : null \r\n        }\r\n\r\n        <Route path=\"/addSchool\" component={AddSchool} /> \r\n        <Route path=\"/favourites\" component={Favourites} /> \r\n        </div>\r\n        <Footer />\r\n      </Router>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}